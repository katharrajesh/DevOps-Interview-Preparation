9717996125
kulbhushan.mayer@thinknyx.com

https://65.0.251.181:32000/#/error?namespace=kul


Kulbhushan Mayer/synechron-march-terraform		=> terraform
https://github.com/orgs/kul-samples/teams/synechron-march-terraform/repositories
kul-samples/synechron-march-terraform

https://github.com/kul-samples/kubernetes.git
kul-samples/kubernetes
Master : 65.0.56.141  [ 172.31.37.53 ]
Slave :  65.1.126.147 [ 172.31.40.9 ]
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

========== Master ===================
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
sudo apt-get update -y
sudo apt-get install -y apt-transport-https ca-certificates curl
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update -y
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

kubeadm init --apiserver-advertise-address=172.31.37.53 --pod-network-cidr=192.168.0.0/16

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubeadm join 172.31.37.53:6443 --token 3m1zq0.rimt6bqgix6qm40i \
    --discovery-token-ca-cert-hash sha256:213555bf81c8ef950f88da3f92b1c7046f1a655705cdd50a0205915faa2ca4c2
	


# sudo kubeadm reset			=> To reset all configuration

kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
kubectl get nodes
kubectl get pods -A
kubectl get deployments -A
kubectl get daemonset -A

# kubeadm token create --print-join-command   => To generate token on master

=================================================================================================================
kubectl get ns
kubectl create ns raj
kubectl get ns
kubectl config set-context  --current --namespace=raj
kubectl get pods

kubectl create deployment httpd --image=httpd
kubectl get deployment
kubectl get all
kubectl describe pod/httpd-757fb56c8d-k94d4
kubectl describe deployment.apps/httpd
kubectl describe replicaset.apps/httpd-757fb56c8d


kubectl describe deployment httpd
kubectl get pods
kubectl delete pod httpd-757fb56c8d-h9csc
kubectl get pods
kubectl get rs
kubectl delete rs httpd-757fb56c8d
kubectl get rs
kubectl get pods
kubectl get deploy
kubectl delete deployment httpd
kubectl get deploy


kubectl create deployment vote --image=thinknyx/vote:1.0
kubectl scale deployment vote --replicas=3
kubectl expose deployment vote --port 80 --type NodePort

kubectl get nodes --show-labels
kubectl label node ip-172-31-40-9 os_release=focal

kubectl api-resources			=> To check namespace and kind

kubectl get cj				=> To check cron job or batch

kubectl exec -it devops-6c5449ccb4-gq7fx -- printenv
kubectl exec -it devops-6c5449ccb4-gq7fx -- printenv | grep -i DB

kubectl describe cm devops-with-files

kubectl get secret

kubectl exec devops-58f7d8b44b-nds8l -- cat /opt/app/.ssh/authorized-keys

kubectl exec -it devops-58f7d8b44b-nds8l -- /bin/bash

=============================  Permission====================
mkdir context
sudo adduser raj
grep raj /etc/passwd

sudo openssl req -new -newkey rsa:4096 -nodes -keyout kul-k8s.key -out kul-k8s.csr -subj "/CN=kul/O=devops"
ll
cat kul-k8s.csr | base64 | tr -d '\n'
vi k8s-csr.yaml
kubectl get csr
kubectl apply -f k8s-csr.yaml
kubectl get csr
kubectl certificate approve kul-k8s-access
kubectl get csr
ll
kubectl get csr kul-k8s-access -o jsonpath='{.status.certificate}' | base64 --decode > kul-k8s-access.crt
ll
cat kul-k8s-access.crt

kubectl config view -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' --raw | base64 --decode - > k8s-ca.crt
ll
cat ~/.kube/config
cat ~/.kube/config | less
kubectl config set-cluster $(kubectl config view -o jsonpath='{.clusters[0].name}') --server=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}') --certificate-authority=k8s-ca.crt --kubeconfig=kul-k8s-config --embed-certs
cat kul-k8s-config
kubectl config set-credentials kul --client-certificate=kul-k8s-access.crt --client-key=kul-k8s.key --embed-certs --kubeconfig=kul-k8s-config
cat kul-k8s-config
cat kul-k8s-config | less
kubectl config set-context kul --cluster=$(kubectl config view -o jsonpath='{.clusters[0].name}') --namespace=kul --user=kul --kubeconfig=kul-k8s-config

============ troubleshooting ===========
sudo chmod 644 kul-k8s.key
rm -rf kul-k8s-config
88  kubectl config view -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' --raw | base64 --decode - > k8s-ca.crt
   89  kubectl config set-cluster $(kubectl config view -o jsonpath='{.clusters[0].name}') --server=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}') --certificate-authority=k8s-ca.crt --kubeconfig=kul-k8s-config --embed-certs
   90  kubectl config set-credentials kul --client-certificate=kul-k8s-access.crt --client-key=kul-k8s.key --embed-certs --kubeconfig=kul-k8s-config
   91  kubectl config set-context kul --cluster=$(kubectl config view -o jsonpath='{.clusters[0].name}') --namespace=kul --user=kul --kubeconfig=kul-k8s-config
   92  cat kul-k8s-access.crt
   93  cat kul-k8s-config
===============================================================
cp kul-k8s-config  /home/kul/.kube/
chown kul. /home/kul/.kube/kul-k8s-config
mv /home/kul/.kube/kul-k8s-config /home/kul/.kube/config
============ login to master server using kul user ================

mkdir ~/.kube
kubectl config use-context kul --kubeconfig=/home/kul/.kube/config
kubectl get nodes	=> It should show "Forbidden"

=================================================================
kubectl get role
kubectl apply -f createRole.yaml
kubectl describe role pod-viewer

kubectl get rolebinding
kubectl apply -f createRoleBinding.yaml
kubectl describe rolebinding pod-viewer
